apiVersion: v1
kind: ConfigMap
metadata:
  name: server
data:
  start.sh: |
    #!/bin/bash

    sleep $(( RANDOM % 5 ))

    locator_ready=0
    for (( try=0; try<=10 && locator_ready==0; try++ ))
    do
      gfsh -e "connect --locator=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}]"
      if [ $? -eq 0 ];then
        locator_ready=1
      else
        sleep 5
      fi
    done

    gfsh start server --name=${HOSTNAME} --locators=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}] --J=-Dgemfire.distributed-system-id=${GEODE_CLUSTER_ID}

    servers_ready=0
    for (( try=0; try<=10 && servers_ready==0; try++ ))
    do
      servers=`gfsh -e "connect --locator=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}]" -e "list members" | grep server- | wc -l`
      if [ $servers == '2' ];then
        servers_ready=1
      else
        sleep $(( (RANDOM % 5) + 1 ))
      fi
    done

    gfsh -e "connect --locator=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}]" -e "create gateway-receiver --hostname-for-senders=${GEODE_RECEIVER_SERVICE_NAME}.geode-cluster-${GEODE_CLUSTER_ID}.svc.cluster.local --member=$HOSTNAME --start-port=${GEODE_RECEIVER_SERVICE_PORT} --end-port=${GEODE_RECEIVER_SERVICE_PORT}"
    gfsh -e "connect --locator=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}]" -e "create gateway-sender --id=sender-to-${GEODE_REMOTE_CLUSTER_ID} --parallel=true --remote-distributed-system-id=${GEODE_REMOTE_CLUSTER_ID}"

    if [ $HOSTNAME == 'server-0' ]; then
      sleep 5
      gfsh -e "connect --locator=${GEODE_LOCATOR_HOST}[${GEODE_LOCATOR_PORT}]" -e "create region --name=example-region --type=PARTITION_REDUNDANT --gateway-sender-id=sender-to-${GEODE_REMOTE_CLUSTER_ID}"
    fi

    while true; do
      sleep 10
    done
